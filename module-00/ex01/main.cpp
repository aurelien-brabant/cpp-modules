#include <iostream>
#include <cctype>
#include <stdexcept>
#include <fstream>

#include "Contact.h"
#include "PhoneBook.h"
#include "CommandInfo.h"

static CommandInfo infos[] = {
	{ "HELP", "Display this help menu", &commandHelp },
	{ "ADD", "Add a contact to the phonebook", &commandAdd },
	{ "SEARCH", "List registered contacts and print informations about a particular one", &commandSearch },
	{ "REMOVE", "Remove a contact at a given index", commandRemove },
	{ "CLEAR", "Remove all the contacts from the phone book", commandClear },
	{ "SAVE", "Save the currently stored contacts into the specified file, that will be loadable by the phonebook.", commandSave },
	{ "LOAD", "Load a saved list of contacts from a file. This file should have been generated by the SAVE command.", commandLoad },
	{ "EXIT", "Close the phone book program", commandExit }
};

static bool promptContactIndex(PhoneBook &pb, PhoneBook::size_type &contactIndex)
{
	if (pb.size() == 0) {
		std::cout << "Can't select: phone book is empty" << std::endl;
	} else {
		std::string line;
		std::cout << "Contact ID (0-" << pb.size() - 1 << ")> ";
		if (getline(std::cin, line) && line.size() == 1 && isdigit(line[0])) {
			contactIndex = line[0] - 48;
			return true;
		}
	}
	return false;
}

static std::istream	&promptLine(std::string const &promptContent, std::string &line)
{
	if (std::cin) {
		std::cout << promptContent;
		getline(std::cin, line);
	}
	return std::cin;
}

inline void	commandExit(PhoneBook &pb)
{
	// simulate EOF
	(void)pb;
	std::cin.setstate(std::cin.eofbit);
}

void	commandHelp(PhoneBook &pb)
{
	(void)pb;

	for (size_t i = 0; i != sizeof (infos) / sizeof (*infos); ++i) {
		std::cout << std::left << std::setw(10) << infos[i].label << "" << infos[i].usage << "\n";
	}
	std::cout << std::flush;
}

void	commandClear(PhoneBook &pb) {
	if (pb.size() == 0) {
		std::cout << "Phone book is empty" << std::endl;
		return ;
	}
	std::cout << "Cleared a total of " << pb.size() << " contact" << (pb.size() > 1 ? "s" : "") << std::endl;
	pb.clear(); 
};

void	commandSave(PhoneBook &pb)
{
	 std::string filepath;

	 std::cout << "file path> ";
	 if (getline(std::cin, filepath)) {
		std::ofstream ofs(filepath);
		if (ofs) {
			for (PhoneBook::size_type i = 0; i != pb.size(); ++i) {
				Contact const &cp = *pb.getContact(i);
				ofs << cp.getFirstName() << "\n" << cp.getLastName() << "\n"
					<< cp.getNickname() << "\n" << cp.getPhone() << "\n" << cp.getDarkestSecret() << "\n---" << std::endl;
			}
			std::cout << "Saved phonebook data in " << filepath << std::endl;
		} else {
			std::cerr << "\033[1;31mError\033[0m: could not open file \"" << filepath << "\"" << std::endl;
		}
	 } else {
		 std::cerr << "\033[1;31mError\033[0m: Could not read file path" << std::endl; 
	 }
}

void	commandLoad(PhoneBook &pb)
{
	 std::string filepath;

	 std::cout << "file path> ";
	 if (getline(std::cin, filepath)) {
		std::ifstream ifs(filepath);
		if (ifs) {
			pb.clear();
			while (ifs) {
				std::string firstName, lastName, nickname, phone, darkestSecret;

				getline(ifs, firstName);
				getline(ifs, lastName);
				getline(ifs, nickname);
				getline(ifs, phone);
				getline(ifs, darkestSecret);
				if (ifs) {
					Contact c(firstName, lastName, nickname, phone, darkestSecret);
					pb.addContact(c);
	
					std::string line;
					if (getline(ifs, line) && line != "---") {
						std::cerr << "\033[1;31mError\033[0m: could not find delimiter, LOAD is uncomplete." << std::endl;
						break;
					}
				}
			}
			std::cout << "Loaded phone data data from " << filepath << std::endl;
		} else {
			std::cerr << "\033[1;31mError\033[0m: could not open file \"" << filepath << "\"" << std::endl;
		}
	 } else {
		 std::cerr << "\033[1;31mError\033[0m: Could not read file path" << std::endl; 
	 }
}

void	commandAdd(PhoneBook &pb)
{
	std::string firstName, lastName, nickname, phone, darkestSecret;

	promptLine("firstName> ", firstName);
	promptLine("lastName> ", lastName);
	promptLine("nickname> ", nickname);
	promptLine("phone> ", phone);
	promptLine("darkestSecret> ", darkestSecret);

	Contact contact(firstName, lastName, nickname, phone, darkestSecret);
	pb.addContact(contact);
	std::cout << "Added " << firstName << " " << lastName << " to the phone book" << std::endl;
}

void	commandSearch(PhoneBook &pb)
{
	pb.list();
	PhoneBook::size_type contactId;

	if (promptContactIndex(pb, contactId)) {
		try {
			std::cout << *pb.getContact(contactId) << std::endl;
		} catch(std::out_of_range err) {
			std::cerr << err.what() << std::endl;
		}
	}
}

void	commandRemove(PhoneBook &pb)
{
	PhoneBook::size_type contactId;

	if (promptContactIndex(pb, contactId)) {
		try {
			pb.removeContact(contactId);
			std::cout << "Contact removed successfully" << std::endl;
		} catch(std::out_of_range err) {
			std::cerr << err.what() << std::endl;
		}
	}
}

int main(void)
{
	PhoneBook pb;
	std::string cmd;

	while (promptLine("\033[1;0mPhoneBook\033[0m> ", cmd)) {
		bool found = false;
		for (size_t i = 0; i != sizeof (infos) / sizeof(*infos); ++i) {
			if (infos[i].label == cmd) {
				infos[i].handler(pb);
				found = true;
				break ;
			}
		}
		if (!found) {
			std::cerr << "\033[1;31mError\033[0m: Unknown command \"" << cmd << "\". Type HELP for help." << std::endl;
		}
	}

	std::cout << "Bye!" << std::endl;
	
	return 0;
}
